# -*- coding: utf-8 -*-
"""visualise_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bwq0QxcjGLRmSo3l3GCR6pu2SnRe4UJ2

# **Visualise_Data**
"""

import os
import cv2
from ultralytics import YOLO
from tqdm import tqdm

OUTPUT_DIR = "/content/drive/MyDrive"
NEW_DATASET_DIR = os.path.join(OUTPUT_DIR, "new_dataset")
VISUALIZATION_DIR = os.path.join(NEW_DATASET_DIR, "visualizations")
MODEL_PATH = "/content/yolov8n.pt"

CLASS_COLORS = {
    'person': (0, 255, 0),
    'bicycle': (0, 165, 255),
    'car': (255, 0, 0),
    'motorcycle': (255, 255, 0),
    'bus': (0, 255, 255),
    'truck': (255, 0, 255)
}

def visualize_results():

    os.makedirs(VISUALIZATION_DIR, exist_ok=True)

    # Load model for class names
    model = YOLO(MODEL_PATH)
    class_names = model.names

    img_dir = os.path.join(NEW_DATASET_DIR, "images")
    label_dir = os.path.join(NEW_DATASET_DIR, "labels")

    image_files = sorted(os.listdir(img_dir))

    for img_file in tqdm(image_files, desc="Visualizing images"):
        img_path = os.path.join(img_dir, img_file)
        label_path = os.path.join(label_dir, img_file.replace(".jpg", ".txt"))

        image = cv2.imread(img_path)
        if image is None:
            continue
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        height, width = image.shape[:2]

        if os.path.exists(label_path):
            with open(label_path, "r") as f:
                for line in f.readlines():
                    parts = line.strip().split()
                    if len(parts) != 5:
                        continue
                    cls_id, x_center, y_center, w, h = map(float, parts)
                    cls_name = class_names[int(cls_id)]

                    # Convert from YOLO format to absolute coordinates
                    x1 = int((x_center - w/2) * width)
                    y1 = int((y_center - h/2) * height)
                    x2 = int((x_center + w/2) * width)
                    y2 = int((y_center + h/2) * height)

                    color = CLASS_COLORS.get(cls_name, (255, 255, 255))
                    cv2.rectangle(image, (x1, y1), (x2, y2), color, 2)
                    cv2.putText(image, cls_name, (x1, y1 - 10),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

        # Save the visualized image
        vis_path = os.path.join(VISUALIZATION_DIR, img_file)
        cv2.imwrite(vis_path, cv2.cvtColor(image, cv2.COLOR_RGB2BGR))

    print(f"Visualizations saved in {VISUALIZATION_DIR}")

if __name__ == "__main__":
    visualize_results()